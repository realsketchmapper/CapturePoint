warning: in the working copy of 'src/services/sync/syncService.ts', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/components/map/FeatureMarkers.tsx b/src/components/map/FeatureMarkers.tsx[m
[1mindex 4e923e3..6885904 100644[m
[1m--- a/src/components/map/FeatureMarkers.tsx[m
[1m+++ b/src/components/map/FeatureMarkers.tsx[m
[36m@@ -19,9 +19,16 @@[m [mconst FeatureMarkers: React.FC<ExtendedFeatureMarkersProps> = React.memo(({ feat[m
     console.log('Available feature types:', featureTypes.map(f => f.name));[m
     console.log('Input features:', features);[m
 [m
[32m+[m[32m    // Create a map to track unique features by client_id[m
[32m+[m[32m    const uniqueFeatures = new Map();[m
[32m+[m
     const convertedFeatures = features.map(feature => {[m
       if ('geometry' in feature) {[m
         // It's already a GeoJSON Feature[m
[32m+[m[32m        const clientId = feature.properties?.client_id;[m
[32m+[m[32m        if (clientId && !uniqueFeatures.has(clientId)) {[m
[32m+[m[32m          uniqueFeatures.set(clientId, feature);[m
[32m+[m[32m        }[m
         return feature;[m
       } else {[m
         // It's a CollectedFeature, convert to GeoJSON[m
[36m@@ -33,8 +40,18 @@[m [mconst FeatureMarkers: React.FC<ExtendedFeatureMarkersProps> = React.memo(({ feat[m
           return null;[m
         }[m
 [m
[32m+[m[32m        // Skip if we've already processed this client_id[m
[32m+[m[32m        if (uniqueFeatures.has(collectedFeature.client_id)) {[m
[32m+[m[32m          return null;[m
[32m+[m[32m        }[m
[32m+[m
         // Validate NMEA data[m
[31m-        const nmeaCoordinates = NMEAParser.ggaToMaplibreCoordinates(collectedFeature.points[0].nmeaData.gga);[m
[32m+[m[32m        const nmeaData = collectedFeature.points[0].attributes?.nmeaData;[m
[32m+[m[32m        if (!nmeaData?.gga) {[m
[32m+[m[32m          console.warn('Skipping feature with invalid NMEA data:', collectedFeature);[m
[32m+[m[32m          return null;[m
[32m+[m[32m        }[m
[32m+[m[32m        const nmeaCoordinates = NMEAParser.ggaToMaplibreCoordinates(nmeaData.gga);[m
         if (!nmeaCoordinates) {[m
           console.warn('Skipping feature with invalid NMEA data:', collectedFeature);[m
           return null;[m
[36m@@ -49,7 +66,7 @@[m [mconst FeatureMarkers: React.FC<ExtendedFeatureMarkersProps> = React.memo(({ feat[m
           return null;[m
         }[m
 [m
[31m-        return {[m
[32m+[m[32m        const convertedFeature = {[m
           type: 'Feature' as const,[m
           geometry: {[m
             type: 'Point' as const,[m
[36m@@ -64,6 +81,9 @@[m [mconst FeatureMarkers: React.FC<ExtendedFeatureMarkersProps> = React.memo(({ feat[m
             points: collectedFeature.points[m
           }[m
         };[m
[32m+[m
[32m+[m[32m        uniqueFeatures.set(collectedFeature.client_id, convertedFeature);[m
[32m+[m[32m        return convertedFeature;[m
       }[m
     }).filter(Boolean);[m
 [m
[1mdiff --git a/src/components/map/MapControls.tsx b/src/components/map/MapControls.tsx[m
[1mindex a031a47..5a3a292 100644[m
[1m--- a/src/components/map/MapControls.tsx[m
[1m+++ b/src/components/map/MapControls.tsx[m
[36m@@ -303,14 +303,18 @@[m [mexport const MapControls: React.FC = () => {[m
           continue;[m
         }[m
 [m
[31m-        // Extract coordinates from NMEA data of the first point[m
[32m+[m[32m        // Extract coordinates from NMEA data[m
         const point = collectedFeature.points[0];[m
[31m-        const longitude = point?.nmeaData?.gga?.longitude || 0;[m
[31m-        const latitude = point?.nmeaData?.gga?.latitude || 0;[m
[32m+[m[32m        if (!point.attributes?.nmeaData?.gga?.longitude || !point.attributes?.nmeaData?.gga?.latitude) {[m
[32m+[m[32m          console.warn('Feature has invalid coordinates:', collectedFeature.client_id);[m
[32m+[m[32m          continue;[m
[32m+[m[32m        }[m
[32m+[m[41m        [m
[32m+[m[32m        const longitude = point.attributes.nmeaData.gga.longitude;[m
[32m+[m[32m        const latitude = point.attributes.nmeaData.gga.latitude;[m
         [m
         // Find the feature type by name[m
         const featureTypeName = collectedFeature.name;[m
[31m-        console.log('Looking for feature type by name:', featureTypeName);[m
         const featureType = getFeatureTypeByName(featureTypeName);[m
         [m
         if (!featureType) {[m
[36m@@ -340,18 +344,12 @@[m [mexport const MapControls: React.FC = () => {[m
         };[m
         [m
         // Add to map using addFeature[m
[31m-        console.log('Adding feature to map:', {[m
[31m-          name: feature.properties?.name,[m
[31m-          coordinates: (feature.geometry as Point).coordinates,[m
[31m-          featureType: feature.properties?.featureType?.name[m
[31m-        });[m
         addFeature(feature);[m
       }[m
       [m
       console.log('Features loaded and added to map');[m
[31m-      featuresLoadedRef.current = true;[m
     } catch (error) {[m
[31m-      console.error('Error loading features from storage:', error);[m
[32m+[m[32m      console.error('Error loading features:', error);[m
     } finally {[m
       setIsLoadingFeatures(false);[m
     }[m
[36m@@ -368,9 +366,41 @@[m [mexport const MapControls: React.FC = () => {[m
     if (!featuresLoadedRef.current && !isLoadingFeatures) {[m
       console.log('Initial feature load');[m
       loadFeaturesFromStorage();[m
[32m+[m[32m      featuresLoadedRef.current = true;[m
     }[m
   }, [isMapReady, activeProject, loadFeaturesFromStorage, isLoadingFeatures]);[m
 [m
[32m+[m[32m  // Memoize feature type lookup[m
[32m+[m[32m  const memoizedGetFeatureTypeByName = useCallback((name: string) => {[m
[32m+[m[32m    return getFeatureTypeByName(name);[m
[32m+[m[32m  }, [getFeatureTypeByName, featureTypes]);[m
[32m+[m
[32m+[m[32m  // Memoize feature creation[m
[32m+[m[32m  const createMapFeature = useCallback((collectedFeature: CollectedFeature, point: PointCollected, featureType: any) => {[m
[32m+[m[32m    const longitude = point.nmeaData.gga.longitude;[m
[32m+[m[32m    const latitude = point.nmeaData.gga.latitude;[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      type: 'Feature',[m
[32m+[m[32m      id: collectedFeature.client_id,[m
[32m+[m[32m      geometry: {[m
[32m+[m[32m        type: 'Point',[m
[32m+[m[32m        coordinates: [longitude, latitude][m
[32m+[m[32m      },[m
[32m+[m[32m      properties: {[m
[32m+[m[32m        type: 'Point',[m
[32m+[m[32m        client_id: collectedFeature.client_id,[m
[32m+[m[32m        name: collectedFeature.name,[m
[32m+[m[32m        description: point?.description || '',[m
[32m+[m[32m        feature_id: point?.feature_id || 0,[m
[32m+[m[32m        featureType: featureType,[m
[32m+[m[32m        draw_layer: collectedFeature.draw_layer,[m
[32m+[m[32m        style: collectedFeature.attributes?.style || {},[m
[32m+[m[32m        color: featureType.color[m
[32m+[m[32m      }[m
[32m+[m[32m    };[m
[32m+[m[32m  }, []);[m
[32m+[m
   // Add clear storage button component[m
   const ClearStorageButton = () => ([m
     <TouchableOpacity[m
[1mdiff --git a/src/components/modals/PointModals/MapPointDetails.tsx b/src/components/modals/PointModals/MapPointDetails.tsx[m
[1mindex e55380b..273e69e 100644[m
[1m--- a/src/components/modals/PointModals/MapPointDetails.tsx[m
[1m+++ b/src/components/modals/PointModals/MapPointDetails.tsx[m
[36m@@ -36,6 +36,23 @@[m [mconst MapPointDetails: React.FC<MapPointDetailsProps> = ({[m
   const [isSaving, setIsSaving] = useState(false);[m
   const [isDeleting, setIsDeleting] = useState(false);[m
 [m
[32m+[m[32m  // Helper function to get nmeaData regardless of point structure[m
[32m+[m[32m  const getNmeaData = (point: PointCollected) => {[m
[32m+[m[32m    // Check if nmeaData is directly on the point[m
[32m+[m[32m    if (point.attributes?.nmeaData) {[m
[32m+[m[32m      return point.attributes.nmeaData;[m
[32m+[m[32m    }[m
[32m+[m[32m    // Check if nmeaData is in points[0].attributes[m
[32m+[m[32m    if (point.points?.[0]?.attributes?.nmeaData) {[m
[32m+[m[32m      return point.points[0].attributes.nmeaData;[m
[32m+[m[32m    }[m
[32m+[m[32m    // Check if nmeaData is in points[0].attributes[m
[32m+[m[32m    if (point.points?.[0]?.attributes?.nmeaData) {[m
[32m+[m[32m      return point.points[0].attributes.nmeaData;[m
[32m+[m[32m    }[m
[32m+[m[32m    return null;[m
[32m+[m[32m  };[m
[32m+[m
   const formatValue = (value: any): string => {[m
     if (value === null || value === undefined) return 'N/A';[m
     if (typeof value === 'string') return value;[m
[36m@@ -283,51 +300,51 @@[m [mconst MapPointDetails: React.FC<MapPointDetailsProps> = ({[m
                 {/* Position */}[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Longitude:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gga.longitude)}</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gga?.longitude)}</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Latitude:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gga.latitude)}</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gga?.latitude)}</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Altitude:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gga.altitude)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gga?.altitude)} m</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Geoid Height:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gga.geoidHeight)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gga?.geoidHeight)} m</Text>[m
                 </View>[m
 [m
                 {/* Quality Indicators */}[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Fix Quality:</Text>[m
[31m-                  <Text style={styles.value}>{getFixQualityText(point.nmeaData.gga.quality)}</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{getFixQualityText(getNmeaData(point)?.gga?.quality ?? 0)}</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Satellites:</Text>[m
[31m-                  <Text style={styles.value}>{point.nmeaData.gga.satellites}</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{getNmeaData(point)?.gga?.satellites}</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>HDOP:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gga.hdop)}</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gga?.hdop)}</Text>[m
                 </View>[m
 [m
                 {/* Error Estimates */}[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>RMS Total:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gst.rmsTotal)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gst?.rmsTotal)} m</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Lat Error:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gst.latitudeError)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gst?.latitudeError)} m</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Lon Error:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gst.longitudeError)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gst?.longitudeError)} m</Text>[m
                 </View>[m
                 <View style={styles.detailRow}>[m
                   <Text style={styles.label}>Height Error:</Text>[m
[31m-                  <Text style={styles.value}>{formatValue(point.nmeaData.gst.heightError)} m</Text>[m
[32m+[m[32m                  <Text style={styles.value}>{formatValue(getNmeaData(point)?.gst?.heightError)} m</Text>[m
                 </View>[m
               </View>[m
             </View>[m
[1mdiff --git a/src/contexts/CollectionContext.tsx b/src/contexts/CollectionContext.tsx[m
[1mindex ce8d9fc..3743826 100644[m
[1m--- a/src/contexts/CollectionContext.tsx[m
[1m+++ b/src/contexts/CollectionContext.tsx[m
[36m@@ -9,6 +9,7 @@[m [mimport { AuthContext } from '@/contexts/AuthContext';[m
 import { ProjectContext } from '@/contexts/ProjectContext';[m
 import { featureStorageService } from '@/services/storage/featureStorageService';[m
 import { syncService } from '@/services/sync/syncService';[m
[32m+[m[32mimport { standardizeDateTime, getCurrentStandardizedTime } from '@/utils/datetime';[m
 // Replace v4 import with a more React Native friendly approach[m
 import 'react-native-get-random-values'; // Add this import at the top[m
 import { v4 as uuidv4 } from 'uuid';[m
[36m@@ -60,8 +61,8 @@[m [mconst initialState = {[m
       description: '',[m
       project_id: 0,[m
       created_by: '',[m
[31m-      created_at: new Date().toISOString(),[m
[31m-      updated_at: new Date().toISOString(),[m
[32m+[m[32m      created_at: getCurrentStandardizedTime(),[m
[32m+[m[32m      updated_at: getCurrentStandardizedTime(),[m
       updated_by: ''[m
     }[m
   },[m
[36m@@ -119,8 +120,8 @@[m [mfunction collectionReducer(state: typeof initialState, action: CollectionAction)[m
             description: '',[m
             project_id: 0,[m
             created_by: '',[m
[31m-            created_at: new Date().toISOString(),[m
[31m-            updated_at: new Date().toISOString(),[m
[32m+[m[32m            created_at: getCurrentStandardizedTime(),[m
[32m+[m[32m            updated_at: getCurrentStandardizedTime(),[m
             updated_by: ''[m
           }[m
         }[m
[36m@@ -203,8 +204,8 @@[m [mexport const CollectionProvider: React.FC<{ children: React.ReactNode }> = ({ ch[m
           description: '',[m
           project_id: activeProject?.id || 0,[m
           created_by: String(user?.id || 'unknown'),[m
[31m-          created_at: new Date().toISOString(),[m
[31m-          updated_at: new Date().toISOString(),[m
[32m+[m[32m          created_at: getCurrentStandardizedTime(),[m
[32m+[m[32m          updated_at: getCurrentStandardizedTime(),[m
           updated_by: String(user?.id || 'unknown')[m
         }[m
       };[m
[36m@@ -219,8 +220,8 @@[m [mexport const CollectionProvider: React.FC<{ children: React.ReactNode }> = ({ ch[m
         description: '',[m
         project_id: activeProject?.id || 0,[m
         created_by: String(user?.id || 'unknown'),[m
[31m-        created_at: new Date().toISOString(),[m
[31m-        updated_at: new Date().toISOString(),[m
[32m+[m[32m        created_at: getCurrentStandardizedTime(),[m
[32m+[m[32m        updated_at: getCurrentStandardizedTime(),[m
         updated_by: String(user?.id || 'unknown')[m
       }[m
     };[m
[36m@@ -242,7 +243,7 @@[m [mexport const CollectionProvider: React.FC<{ children: React.ReactNode }> = ({ ch[m
       metadata: {[m
         ...state.collectionState.metadata,[m
         ...metadata,[m
[31m-        updated_at: new